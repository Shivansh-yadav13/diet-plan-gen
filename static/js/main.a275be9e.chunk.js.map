{"version":3,"sources":["Components/Main.js","App.js","reportWebVitals.js","index.js"],"names":["Input","useState","userWeight","setUserWeight","userHeight","setUserHeight","userBMI","setUserBMI","listIndex","setListIndex","useEffect","Box","id","sx","display","gridTemplateRows","TextField","type","value","label","m","width","InputProps","endAdornment","InputAdornment","position","onChange","e","target","disabled","variant","Button","onClick","document","getElementById","style","planList","items_suggested","map","item","Chip","items_avoid","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"q5HA6FeA,MApFf,WACI,MAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KACA,EAAoCF,mBAAS,IAA7C,mBAAOG,EAAP,KAAmBC,EAAnB,KACA,EAA8BJ,mBAAS,IAAvC,mBAAOK,EAAP,KAAgBC,EAAhB,KACA,EAAkCN,qBAAlC,mBAAOO,EAAP,KAAkBC,EAAlB,KAoBA,OAHAC,qBAAU,WACNH,EAAWL,GAAcE,EAAaA,MACvC,CAACF,EAAYE,IAEZ,qCACI,eAACO,EAAA,EAAD,CAAKC,GAAG,sBAAsBC,GAAI,CAAEC,QAAS,OAAQC,iBAAkB,kBAAvE,UACI,qDACA,cAACC,EAAA,EAAD,CACIC,KAAK,SACLC,MAAOhB,EACPiB,MAAM,SACNP,GAAG,2BACHC,GAAI,CAAEO,EAAG,EAAGC,MAAO,QACnBC,WAAY,CACRC,aAAc,cAACC,EAAA,EAAD,CAAgBC,SAAS,MAAzB,iBAElBC,SAAU,SAACC,GAAQxB,EAAcwB,EAAEC,OAAOV,UAE9C,cAACF,EAAA,EAAD,CACIC,KAAK,SACLC,MAAOd,EACPe,MAAM,SACNP,GAAG,2BACHC,GAAI,CAAEO,EAAG,EAAGC,MAAO,QACnBC,WAAY,CACRC,aAAc,cAACC,EAAA,EAAD,CAAgBC,SAAS,MAAzB,gBAElBC,SAAU,SAACC,GAAD,OAAOtB,EAAcsB,EAAEC,OAAOV,UAE5C,cAACF,EAAA,EAAD,CACIH,GAAI,CAAEQ,MAAO,QACbQ,UAAQ,EACRjB,GAAG,oBACHO,MAAM,MACND,MAAOZ,GAAoB,MAC3BwB,QAAQ,aAEZ,cAACC,EAAA,EAAD,CAAQlB,GAAI,CAAEQ,MAAO,OAASW,QAnDnB,WACnBC,SAASC,eAAe,kBAAkBC,MAAMrB,QAAU,QAC1DmB,SAASC,eAAe,uBAAuBC,MAAMrB,QAAU,OAC5C,KAAfV,GAAoC,KAAfF,GAEjBO,EADAH,EAAU,KACG,EACNA,GAAW,MAAQA,EAAU,GACvB,EAEA,IA0C0CwB,QAAQ,OAA/D,uBAEJ,sBAAKlB,GAAG,iBAAiBuB,MAAO,CAAErB,QAAS,OAAQO,MAAO,eAA1D,UACI,yDACA,+BAAKe,EAAS5B,GAAa4B,EAAS5B,GAAWS,KAAO,GAAtD,WACA,qCACA,6BACKmB,EAAS5B,GAAa4B,EAAS5B,GAAW6B,gBAAgBC,KAAI,SAACC,GAC5D,OACI,cAACC,EAAA,EAAD,CAAMrB,MAAOoB,EAAMT,QAAQ,gBAE9B,KAET,wCACA,6BACKM,EAAS5B,GAAa4B,EAAS5B,GAAWiC,YAAYH,KAAI,SAACC,GACxD,OACI,cAACC,EAAA,EAAD,CAAMrB,MAAOoB,EAAMT,QAAQ,gBAE9B,YC9EVY,MANf,WACE,OACE,cAAC,EAAD,KCQWC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFrB,SAASC,eAAe,SAM1BS,M","file":"static/js/main.a275be9e.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport './CSS/Main.css'\r\nimport planList from '../data/diet_plan.json'\r\nimport { TextField } from '@mui/material'\r\nimport InputAdornment from '@mui/material/InputAdornment'\r\nimport { Button } from '@mui/material'\r\nimport { Box } from '@mui/system'\r\nimport { Chip } from '@mui/material'\r\n\r\nfunction Input() {\r\n    const [userWeight, setUserWeight] = useState('')\r\n    const [userHeight, setUserHeight] = useState('')\r\n    const [userBMI, setUserBMI] = useState('')\r\n    const [listIndex, setListIndex] = useState()\r\n\r\n\r\n    const handleOnSubmit = () => {\r\n        document.getElementById('user-diet-plan').style.display = 'unset'\r\n        document.getElementById('user-data-container').style.display = 'none'\r\n        if (userHeight !== '' && userWeight !== '') {\r\n            if (userBMI < 18.5) {\r\n                setListIndex(1)\r\n            } else if (userBMI >= 18.5 && userBMI < 25) {\r\n                setListIndex(2)\r\n            } else {\r\n                setListIndex(0)\r\n            }\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        setUserBMI(userWeight / (userHeight * userHeight))\r\n    }, [userWeight, userHeight])\r\n    return (\r\n        <>\r\n            <Box id=\"user-data-container\" sx={{ display: 'grid', gridTemplateRows: 'repeat(3, 1fr)' }}>\r\n                <h1>Find Your Diet Plan</h1>\r\n                <TextField\r\n                    type='number'\r\n                    value={userWeight}\r\n                    label=\"Weight\"\r\n                    id=\"outlined-start-adornment\"\r\n                    sx={{ m: 1, width: '25ch' }}\r\n                    InputProps={{\r\n                        endAdornment: <InputAdornment position=\"end\">kg</InputAdornment>,\r\n                    }}\r\n                    onChange={(e) => { setUserWeight(e.target.value) }}\r\n                />\r\n                <TextField\r\n                    type='number'\r\n                    value={userHeight}\r\n                    label=\"Height\"\r\n                    id=\"outlined-start-adornment\"\r\n                    sx={{ m: 1, width: '25ch' }}\r\n                    InputProps={{\r\n                        endAdornment: <InputAdornment position=\"end\">m</InputAdornment>,\r\n                    }}\r\n                    onChange={(e) => setUserHeight(e.target.value)}\r\n                />\r\n                <TextField\r\n                    sx={{ width: '10em' }}\r\n                    disabled\r\n                    id=\"standard-disabled\"\r\n                    label=\"BMI\"\r\n                    value={userBMI ? userBMI : \"BMI\"}\r\n                    variant=\"standard\"\r\n                />\r\n                <Button sx={{ width: '2em' }} onClick={handleOnSubmit} variant=\"text\">Submit</Button>\r\n            </Box>\r\n            <div id=\"user-diet-plan\" style={{ display: 'none', width: 'fit-content' }}>\r\n                <h1>This is your Diet Plan </h1>\r\n                <h3>{planList[listIndex] ? planList[listIndex].type : \"\"}-Plan</h3>\r\n                <h4>Dos</h4>\r\n                <ul>\r\n                    {planList[listIndex] ? planList[listIndex].items_suggested.map((item) => {\r\n                        return (\r\n                            <Chip label={item} variant=\"outlined\" />\r\n                        )\r\n                    }) : \"\"}\r\n                </ul>\r\n                <h4>don'ts</h4>\r\n                <ul>\r\n                    {planList[listIndex] ? planList[listIndex].items_avoid.map((item) => {\r\n                        return (\r\n                            <Chip label={item} variant=\"outlined\" />\r\n                        )\r\n                    }) : \"\"}\r\n                </ul>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Input","import Main from './Components/Main' \n\nfunction App() {\n  return (\n    <Main />\n  )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}